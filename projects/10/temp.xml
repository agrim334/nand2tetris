<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<identifier> y </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> z </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<parameterList>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> a </identifier>
<keyword> int </keyword>
<identifier> b </identifier>
<keyword> int </keyword>
<identifier> c </identifier>
<symbol> ) </symbol>
</parameterList>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<identifier> Array </identifier>
<identifier> a </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> field </keyword>
<identifier> int </identifier>
<statements>
<letStatement>
<VarName > length </VarName>
<expression>
<term>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<expressionList>
<symbol> ( </symbol>
<expression>
<term>
<stringConstant> HOW MANY NUMBERS?   </stringConstant>
</term>
</expression>
<symbol> ) </symbol>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<VarName > a </VarName>
<expression>
<term>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<expressionList>
<symbol> ( </symbol>
<expression>
<term>
<identifier> length </identifier>
</term>
</expression>
<symbol> ) </symbol>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<VarName > i </VarName>
<expression>
<term>
<integerConstant> 0  </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<symbol> ( </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<term>
<identifier> length </identifier>
</term>
</expression>
<symbol> ) </symbol>
<statements>
<letStatement>
<VarName > a </VarName>
<symbol> [ </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
<expression>
<term>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<expressionList>
<symbol> ( </symbol>
<expression>
<term>
<stringConstant> ENTER THE NEXT NUMBER:   </stringConstant>
</term>
</expression>
<symbol> ) </symbol>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<VarName > i </VarName>
<expression>
<term>
<identifier> i </identifier>
</term>
<term>
<integerConstant> 1  </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<VarName > sum </VarName>
<expression>
<term>
<integerConstant> 0  </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<symbol> ( </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<term>
<identifier> length </identifier>
</term>
</expression>
<symbol> ) </symbol>
<statements>
<letStatement>
<VarName > sum </VarName>
<expression>
<term>
<identifier> sum </identifier>
</term>
<term>
<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<VarName > i </VarName>
<expression>
<term>
<identifier> i </identifier>
</term>
<term>
<integerConstant> 1  </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<doStatement>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<expressionList>
<symbol> ( </symbol>
<expression>
<term>
<identifier> sum </identifier>
</term>
<term>
<identifier> length </identifier>
</term>
</expression>
<symbol> ) </symbol>
</expressionList>
<symbol> ) </symbol>
<doStatement>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
<symbol> ( </symbol>
<symbol> ) </symbol>
</expressionList>
<symbol> ) </symbol>
<returnStatement>
<expression>
<term>
</term>
</expression>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
